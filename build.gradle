buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'

group = 'com.centurylink.mdwdemo'
version = '2.0.1'

description = "mdw-demo"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal() // TEMP
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

dependencies {
    compile group: 'com.centurylink.mdw', name: 'mdw-spring-boot', version: mdwVersion
    
    // TODO: which of these are needed once mdw-spring-boot published to snapshots?
    compile group: "commons-io", name: "commons-io", version: "2.5"
    compile group: "javax.validation", name: "validation-api", version: "2.0.1.Final"
    compile group: "org.hibernate.validator", name: "hibernate-validator", version: "6.0.11.Final"
    compile group: "org.json", name: "json", version: "20180130"
    
    // asset package dependencies (kt self-sourced jars excluded)
    compileOnly fileTree(dir: "assets/com/centurylink/mdw/db", includes: ["*.jar"])
    compileOnly fileTree(dir: "assets/com/centurylink/mdw/drools", includes: ["*.jar"])
    compileOnly fileTree(dir: "assets/com/centurylink/mdw/kotlin", includes: ["*.jar"])
    compileOnly fileTree(dir: "assets/com/centurylink/mdw/microservice", includes: ["*.jar"])
    compileOnly fileTree(dir: "assets/com/centurylink/mdw/node", includes: ["*.jar"])
    compileOnly fileTree(dir: "assets/com/centurylink/mdw/system/filepanel", includes: ["*.jar"])
    
    compile group: 'junit', name: 'junit', version:'4.8.1'
}

task copy(type: Copy) {
    def jarName = 'mdw-demo-' + version + '.jar'
    from "$buildDir/libs"
    into "${assetLoc}/com/centurylink/mdw/demo/cool"
    include jarName
    rename (jarName, 'mdw-demo.jar')
}

bootJar {
    mainClassName = 'com.centurylink.mdwdemo.DemoApplication'
}


build  {
    dependsOn(copy)
}